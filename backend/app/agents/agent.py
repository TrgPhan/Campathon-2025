from dotenv import load_dotenv
from langchain_core.messages import HumanMessage, AIMessage
from langgraph.prebuilt import create_react_agent
from .tools.retrieve_recipe_tool import recipe_retrieve_tool
from .config import get_llm_for_agent
from .prompt.agent_prompt import prompt

def create_conversational_agent():
    """T·∫°o agent v·ªõi kh·∫£ nƒÉng h·ªôi tho·∫°i"""
    tools = [recipe_retrieve_tool]
    agent_executor = create_react_agent(
        model=get_llm_for_agent(),
        tools=tools,
        prompt=prompt,
        debug=False,
    )
    return agent_executor

def chat_with_agent():
    """H√†m ch√≠nh ƒë·ªÉ chat v·ªõi agent c√≥ l·ªãch s·ª≠"""
    print("üç≥ Recipe Assistant - Type 'quit', 'exit', or 'bye' to end the conversation")
    print("=" * 60)
    
    # Kh·ªüi t·∫°o agent
    agent_executor = create_conversational_agent()
    
    # L∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i
    conversation_history = []
    
    while True:
        try:
            # Nh·∫≠n input t·ª´ user
            user_input = input("\nüë§ You: ").strip()
            
            # Ki·ªÉm tra l·ªánh tho√°t
            if user_input.lower() in ['quit', 'exit', 'bye', 'q']:
                print("\nüëã Goodbye! Happy cooking!")
                break
            
            if not user_input:
                print("Please enter a message or type 'quit' to exit.")
                continue
            
            # Th√™m message c·ªßa user v√†o l·ªãch s·ª≠
            conversation_history.append(HumanMessage(content=user_input))
            
            # T·∫°o input cho agent v·ªõi to√†n b·ªô l·ªãch s·ª≠
            inputs = {"messages": conversation_history}
            
            # G·ªçi agent
            print("\nü§ñ Assistant: ", end="")
            state = agent_executor.invoke(inputs)
            
            # L·∫•y response t·ª´ agent
            assistant_response = state["messages"][-1].content
            print(assistant_response)
            
            # Th√™m response c·ªßa assistant v√†o l·ªãch s·ª≠
            conversation_history.append(AIMessage(content=assistant_response))
            
        except KeyboardInterrupt:
            print("\n\nüëã Goodbye! Happy cooking!")
            break
        except Exception as e:
            print(f"\n‚ùå Error: {str(e)}")
            print("Please try again.")

def chat_with_session_management():
    """Phi√™n b·∫£n n√¢ng cao v·ªõi qu·∫£n l√Ω session"""
    print("üç≥ Recipe Assistant - Advanced Session Management")
    print("Commands: 'quit'/'exit'/'bye' to end, 'clear' to clear history, 'history' to view conversation")
    print("=" * 80)
    
    agent_executor = create_conversational_agent()
    conversation_history = []
    
    while True:
        try:
            user_input = input("\nüë§ You: ").strip()
            
            # X·ª≠ l√Ω c√°c l·ªánh ƒë·∫∑c bi·ªát
            if user_input.lower() in ['quit', 'exit', 'bye', 'q']:
                print("\nüëã Goodbye! Happy cooking!")
                break
            elif user_input.lower() == 'clear':
                conversation_history = []
                print("‚úÖ Conversation history cleared!")
                continue
            elif user_input.lower() == 'history':
                print("\nüìú Conversation History:")
                if not conversation_history:
                    print("No conversation history yet.")
                else:
                    for i, msg in enumerate(conversation_history):
                        role = "üë§ You" if isinstance(msg, HumanMessage) else "ü§ñ Assistant"
                        print(f"{i+1}. {role}: {msg.content[:100]}{'...' if len(msg.content) > 100 else ''}")
                continue
            
            if not user_input:
                print("Please enter a message or use a command.")
                continue
            
            # Th√™m message v√†o l·ªãch s·ª≠
            conversation_history.append(HumanMessage(content=user_input))
            
            # G·ªçi agent v·ªõi l·ªãch s·ª≠ ƒë·∫ßy ƒë·ªß
            inputs = {"messages": conversation_history}
            
            print("\nü§ñ Assistant: ", end="")
            state = agent_executor.invoke(inputs)
            
            assistant_response = state["messages"][-1].content
            print(assistant_response)
            
            # C·∫≠p nh·∫≠t l·ªãch s·ª≠ v·ªõi response m·ªõi nh·∫•t
            conversation_history.append(AIMessage(content=assistant_response))
            
        except KeyboardInterrupt:
            print("\n\nüëã Goodbye! Happy cooking!")
            break
        except Exception as e:
            print(f"\n‚ùå Error: {str(e)}")

def chat_with_memory_limit():
    """Phi√™n b·∫£n v·ªõi gi·ªõi h·∫°n memory ƒë·ªÉ tr√°nh context qu√° d√†i"""
    print("üç≥ Recipe Assistant - Memory Limited")
    print("Type 'quit', 'exit', or 'bye' to end the conversation")
    print("=" * 60)
    
    agent_executor = create_conversational_agent()
    conversation_history = []
    MAX_HISTORY = 10  # Gi·ªØ t·ªëi ƒëa 10 messages g·∫ßn nh·∫•t
    
    while True:
        try:
            user_input = input("\nüë§ You: ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'bye', 'q']:
                print("\nüëã Goodbye! Happy cooking!")
                break
            
            if not user_input:
                continue
            
            # Th√™m message c·ªßa user
            conversation_history.append(HumanMessage(content=user_input))
            
            # Gi·ªõi h·∫°n l·ªãch s·ª≠ ƒë·ªÉ tr√°nh context qu√° d√†i
            if len(conversation_history) > MAX_HISTORY:
                conversation_history = conversation_history[-MAX_HISTORY:]
            
            inputs = {"messages": conversation_history}
            
            print("\nü§ñ Assistant: ", end="")
            state = agent_executor.invoke(inputs)
            
            assistant_response = state["messages"][-1].content
            print(assistant_response)
            
            # Th√™m response c·ªßa assistant
            conversation_history.append(AIMessage(content=assistant_response))
            
            # Gi·ªõi h·∫°n l·∫°i n·∫øu c·∫ßn
            if len(conversation_history) > MAX_HISTORY:
                conversation_history = conversation_history[-MAX_HISTORY:]
                
        except KeyboardInterrupt:
            print("\n\nüëã Goodbye! Happy cooking!")
            break
        except Exception as e:
            print(f"\n‚ùå Error: {str(e)}")

# Ch·∫°y ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    # Ch·ªçn phi√™n b·∫£n b·∫°n mu·ªën s·ª≠ d·ª•ng:
    
    # Phi√™n b·∫£n c∆° b·∫£n
    # chat_with_agent()
    
    # Phi√™n b·∫£n n√¢ng cao v·ªõi qu·∫£n l√Ω session
    # chat_with_session_management()
    
    # Phi√™n b·∫£n v·ªõi gi·ªõi h·∫°n memory
    chat_with_memory_limit()